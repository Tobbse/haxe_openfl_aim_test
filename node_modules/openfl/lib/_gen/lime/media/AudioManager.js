// Class: lime.media.AudioManager

var $global = typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this

$global.Object.defineProperty(exports, "__esModule", {value: true});

var __map_reserved = {};

// Imports

var $hxClasses = require("./../../hxClasses_stub").default;
var $import = require("./../../import_stub").default;
function lime_media_AudioContext() {return require("./../../lime/media/AudioContext");}
function lime_media_HTML5AudioContext() {return require("./../../lime/media/HTML5AudioContext");}
function Type() {return require("./../../Type");}

// Constructor

var AudioManager = function(){}

// Meta

AudioManager.__name__ = ["lime","media","AudioManager"];
AudioManager.prototype = {
	
};
AudioManager.prototype.__class__ = $hxClasses["lime.media.AudioManager"] = AudioManager;

// Init



// Statics

AudioManager.init = function(context) {
	if(AudioManager.context == null) {
		if(context == null) {
			try {
				window.AudioContext = window.AudioContext || window.webkitAudioContext;
				AudioManager.context = (lime_media_AudioContext().default).WEB(new AudioContext ());
			} catch( e ) {
				AudioManager.context = (lime_media_AudioContext().default).HTML5(new (lime_media_HTML5AudioContext().default)());
			}
		} else {
			AudioManager.context = context;
		}
	}
}
AudioManager.resume = function() {
	if(AudioManager.context != null) {
		var _g = AudioManager.context;
		if((Type().default).enumIndex(_g) == 0) {
			var al = _g[3];
			var alc = _g[2];
			var currentContext = alc.getCurrentContext();
			if(currentContext != null) {
				var device = alc.getContextsDevice(currentContext);
				alc.resumeDevice(device);
				alc.processContext(currentContext);
			}
		}
	}
}
AudioManager.shutdown = function() {
	if(AudioManager.context != null) {
		var _g = AudioManager.context;
		if((Type().default).enumIndex(_g) == 0) {
			var al = _g[3];
			var alc = _g[2];
			var currentContext = alc.getCurrentContext();
			if(currentContext != null) {
				var device = alc.getContextsDevice(currentContext);
				alc.makeContextCurrent(null);
				alc.destroyContext(currentContext);
				if(device != null) {
					alc.closeDevice(device);
				}
			}
		}
		AudioManager.context = null;
	}
}
AudioManager.suspend = function() {
	if(AudioManager.context != null) {
		var _g = AudioManager.context;
		if((Type().default).enumIndex(_g) == 0) {
			var al = _g[3];
			var alc = _g[2];
			var currentContext = alc.getCurrentContext();
			if(currentContext != null) {
				alc.suspendContext(currentContext);
				var device = alc.getContextsDevice(currentContext);
				alc.pauseDevice(device);
			}
		}
	}
}


// Export

exports.default = AudioManager;