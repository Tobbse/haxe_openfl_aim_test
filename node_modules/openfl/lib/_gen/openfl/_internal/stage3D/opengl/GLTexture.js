// Class: openfl._internal.stage3D.opengl.GLTexture

var $global = typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this

$global.Object.defineProperty(exports, "__esModule", {value: true});

var __map_reserved = {};

// Imports

var $hxClasses = require("./../../../../hxClasses_stub").default;
var $import = require("./../../../../import_stub").default;
function openfl__$internal_stage3D_GLUtils() {return require("./../../../../openfl/_internal/stage3D/GLUtils");}
function lime_utils__$DataPointer_DataPointer_$Impl_$() {return require("./../../../../lime/utils/_DataPointer/DataPointer_Impl_");}
function openfl__$internal_stage3D_atf_ATFReader() {return require("./../../../../openfl/_internal/stage3D/atf/ATFReader");}
function openfl__$internal_stage3D_opengl_GLTextureBase() {return require("./../../../../openfl/_internal/stage3D/opengl/GLTextureBase");}
function Std() {return require("./../../../../Std");}
function openfl_display3D_textures_Texture() {return require("./../../../../openfl/display3D/textures/Texture");}
function lime_utils_BytePointerData() {return require("./../../../../lime/utils/BytePointerData");}
function openfl_display_BitmapData() {return require("./../../../../openfl/display/BitmapData");}
function openfl_utils__$ByteArray_ByteArray_$Impl_$() {return require("./../../../../openfl/utils/_ByteArray/ByteArray_Impl_");}
function openfl_display3D_Context3D() {return require("./../../../../openfl/display3D/Context3D");}

// Constructor

var GLTexture = function(){}

// Meta

GLTexture.__name__ = ["openfl","_internal","stage3D","opengl","GLTexture"];
GLTexture.prototype = {
	
};
GLTexture.prototype.__class__ = $hxClasses["openfl._internal.stage3D.opengl.GLTexture"] = GLTexture;

// Init



// Statics

GLTexture.create = function(texture,renderSession) {
	var gl = renderSession.gl;
	texture.__textureTarget = gl.TEXTURE_2D;
	gl.bindTexture(texture.__textureTarget,texture.__textureID);
	(openfl__$internal_stage3D_GLUtils().default).CheckGLError();
	gl.texImage2D(texture.__textureTarget,0,texture.__internalFormat,texture.__width,texture.__height,0,texture.__format,gl.UNSIGNED_BYTE,(lime_utils__$DataPointer_DataPointer_$Impl_$().default).fromInt(0));
	(openfl__$internal_stage3D_GLUtils().default).CheckGLError();
	gl.bindTexture(texture.__textureTarget,null);
	GLTexture.uploadFromTypedArray(texture,renderSession,null);
}
GLTexture.uploadCompressedTextureFromByteArray = function(texture,renderSession,data,byteArrayOffset) {
	var reader = new (openfl__$internal_stage3D_atf_ATFReader().default)(data,byteArrayOffset);
	var alpha = reader.readHeader(texture.__width,texture.__height,false);
	var gl = renderSession.gl;
	gl.bindTexture(texture.__textureTarget,texture.__textureID);
	(openfl__$internal_stage3D_GLUtils().default).CheckGLError();
	var hasTexture = false;
	reader.readTextures(function(target,level,gpuFormat,width,height,blockLength,bytes) {
		var format = (openfl__$internal_stage3D_opengl_GLTextureBase().default).__compressedTextureFormats.toTextureFormat(alpha,gpuFormat);
		if(format == 0) {
			return;
		}
		hasTexture = true;
		texture.__format = format;
		texture.__internalFormat = format;
		if(alpha && gpuFormat == 2) {
			var size = (Std().default)["int"](blockLength / 2);
			gl.compressedTexImage2D(texture.__textureTarget,level,texture.__internalFormat,width,height,0,size,(lime_utils__$DataPointer_DataPointer_$Impl_$().default).fromBytes(bytes));
			(openfl__$internal_stage3D_GLUtils().default).CheckGLError();
			var alphaTexture = new (openfl_display3D_textures_Texture().default)(texture.__context,texture.__width,texture.__height,"compressed",texture.__optimizeForRenderToTexture,texture.__streamingLevels);
			alphaTexture.__format = format;
			alphaTexture.__internalFormat = format;
			gl.bindTexture(alphaTexture.__textureTarget,alphaTexture.__textureID);
			(openfl__$internal_stage3D_GLUtils().default).CheckGLError();
			var alphaTexture1 = alphaTexture.__textureTarget;
			var alphaTexture2 = alphaTexture.__internalFormat;
			var this1 = new (lime_utils_BytePointerData().default)(bytes,size);
			gl.compressedTexImage2D(alphaTexture1,level,alphaTexture2,width,height,0,size,(lime_utils__$DataPointer_DataPointer_$Impl_$().default).fromBytesPointer(this1));
			(openfl__$internal_stage3D_GLUtils().default).CheckGLError();
			texture.__alphaTexture = alphaTexture;
		} else {
			gl.compressedTexImage2D(texture.__textureTarget,level,texture.__internalFormat,width,height,0,blockLength,(lime_utils__$DataPointer_DataPointer_$Impl_$().default).fromBytes(bytes));
			(openfl__$internal_stage3D_GLUtils().default).CheckGLError();
		}
	});
	if(!hasTexture) {
		var elements = texture.__width * texture.__height * 4;
		var this2;
		if(elements != null) {
			this2 = new Uint8Array(elements);
		} else {
			this2 = null;
		}
		var data1 = this2;
		gl.texImage2D(texture.__textureTarget,0,texture.__internalFormat,texture.__width,texture.__height,0,texture.__format,gl.UNSIGNED_BYTE,(lime_utils__$DataPointer_DataPointer_$Impl_$().default).fromArrayBufferView(data1));
		(openfl__$internal_stage3D_GLUtils().default).CheckGLError();
	}
	gl.bindTexture(texture.__textureTarget,null);
	(openfl__$internal_stage3D_GLUtils().default).CheckGLError();
}
GLTexture.uploadFromBitmapData = function(texture,renderSession,source,miplevel,generateMipmap) {
	if(source == null) {
		return;
	}
	var width = texture.__width >> miplevel;
	var height = texture.__height >> miplevel;
	if(width == 0 && height == 0) {
		return;
	}
	if(width == 0) {
		width = 1;
	}
	if(height == 0) {
		height = 1;
	}
	if(source.width != width || source.height != height) {
		var copy = new (openfl_display_BitmapData().default)(width,height,true,0);
		copy.draw(source);
		source = copy;
	}
	var image = texture.__getImage(source);
	GLTexture.uploadFromTypedArray(texture,renderSession,image.get_data(),miplevel);
}
GLTexture.uploadFromByteArray = function(texture,renderSession,data,byteArrayOffset,miplevel) {
	if(miplevel == null) {
		miplevel = 0;
	}
	if(byteArrayOffset == 0) {
		GLTexture.uploadFromTypedArray(texture,renderSession,data.b,miplevel);
		return;
	}
	var buffer = (openfl_utils__$ByteArray_ByteArray_$Impl_$().default).toArrayBuffer(data);
	var this1;
	if(buffer != null) {
		this1 = new Uint8Array(buffer,byteArrayOffset);
	} else {
		this1 = null;
	}
	GLTexture.uploadFromTypedArray(texture,renderSession,this1,miplevel);
}
GLTexture.uploadFromTypedArray = function(texture,renderSession,data,miplevel) {
	if(miplevel == null) {
		miplevel = 0;
	}
	if(data == null) {
		return;
	}
	var gl = renderSession.gl;
	var width = texture.__width >> miplevel;
	var height = texture.__height >> miplevel;
	if(width == 0 && height == 0) {
		return;
	}
	if(width == 0) {
		width = 1;
	}
	if(height == 0) {
		height = 1;
	}
	gl.bindTexture(texture.__textureTarget,texture.__textureID);
	(openfl__$internal_stage3D_GLUtils().default).CheckGLError();
	gl.texImage2D(texture.__textureTarget,miplevel,texture.__internalFormat,width,height,0,texture.__format,gl.UNSIGNED_BYTE,(lime_utils__$DataPointer_DataPointer_$Impl_$().default).fromArrayBufferView(data));
	(openfl__$internal_stage3D_GLUtils().default).CheckGLError();
	gl.bindTexture(texture.__textureTarget,null);
	(openfl__$internal_stage3D_GLUtils().default).CheckGLError();
}
GLTexture.setSamplerState = function(texture,renderSession,state) {
	if(!state.equals(texture.__samplerState)) {
		var gl = renderSession.gl;
		if(state.minFilter != gl.NEAREST && state.minFilter != gl.LINEAR && !state.mipmapGenerated) {
			gl.generateMipmap(gl.TEXTURE_2D);
			(openfl__$internal_stage3D_GLUtils().default).CheckGLError();
			state.mipmapGenerated = true;
		}
		if(state.maxAniso != 0.0) {
			gl.texParameterf(gl.TEXTURE_2D,(openfl_display3D_Context3D().default).TEXTURE_MAX_ANISOTROPY_EXT,state.maxAniso);
			(openfl__$internal_stage3D_GLUtils().default).CheckGLError();
		}
	}
	(openfl__$internal_stage3D_opengl_GLTextureBase().default).setSamplerState(texture,renderSession,state);
}


// Export

exports.default = GLTexture;