// Class: openfl._internal.renderer.canvas.CanvasTilemap

var $global = typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this

$global.Object.defineProperty(exports, "__esModule", {value: true});

var __map_reserved = {};

// Imports

var $hxClasses = require("./../../../../hxClasses_stub").default;
var $import = require("./../../../../import_stub").default;
function openfl_geom_Rectangle() {return require("./../../../../openfl/geom/Rectangle");}
function lime_graphics_utils_ImageCanvasUtil() {return require("./../../../../lime/graphics/utils/ImageCanvasUtil");}
function Std() {return require("./../../../../Std");}

// Constructor

var CanvasTilemap = function(){}

// Meta

CanvasTilemap.__name__ = ["openfl","_internal","renderer","canvas","CanvasTilemap"];
CanvasTilemap.prototype = {
	
};
CanvasTilemap.prototype.__class__ = $hxClasses["openfl._internal.renderer.canvas.CanvasTilemap"] = CanvasTilemap;

// Init



// Statics

CanvasTilemap.render = function(tilemap,renderSession) {
	if(!tilemap.__renderable || tilemap.__worldAlpha <= 0) {
		return;
	}
	tilemap.__updateTileArray();
	if(tilemap.__tileArray == null || tilemap.__tileArray.get_length() == 0) {
		return;
	}
	var context = renderSession.context;
	renderSession.blendModeManager.setBlendMode(tilemap.__worldBlendMode);
	renderSession.maskManager.pushObject(tilemap);
	var rect = (openfl_geom_Rectangle().default).__pool.get();
	rect.setTo(0,0,tilemap.__width,tilemap.__height);
	renderSession.maskManager.pushRect(rect,tilemap.__renderTransform);
	var transform = tilemap.__renderTransform;
	var roundPixels = renderSession.roundPixels;
	if(!renderSession.allowSmoothing || !tilemap.smoothing) {
		context.mozImageSmoothingEnabled = false;
		context.msImageSmoothingEnabled = false;
		context.imageSmoothingEnabled = false;
	}
	var defaultTileset = tilemap.__tileset;
	var cacheBitmapData = null;
	var source = null;
	var alpha;
	var visible;
	var tileset;
	var id;
	var tileData;
	var bitmapData;
	var tileArray = tilemap.__tileArray;
	var tileTransform;
	var tileRect = (openfl_geom_Rectangle().default).__pool.get();
	var tile = tileArray.iterator();
	while(tile.hasNext()) {
		var tile1 = tile.next();
		alpha = tile1.get_alpha();
		visible = tile1.get_visible();
		if(!visible || alpha <= 0) {
			continue;
		}
		tileset = tile1.get_tileset();
		if(tileset == null) {
			tileset = defaultTileset;
		}
		if(tileset == null) {
			continue;
		}
		id = tile1.get_id();
		if(id == -1) {
			tileRect.copyFrom(tile1.get_rect());
			if(tileRect.width <= 0 || tileRect.height <= 0) {
				continue;
			}
		} else {
			tileData = tileset.__data[id];
			if(tileData == null) {
				continue;
			}
			tileRect.setTo(tileData.x,tileData.y,tileData.width,tileData.height);
		}
		bitmapData = tileset.get_bitmapData();
		if(bitmapData == null || !bitmapData.readable) {
			continue;
		}
		if(bitmapData != cacheBitmapData) {
			if(bitmapData.image.buffer.__srcImage == null) {
				(lime_graphics_utils_ImageCanvasUtil().default).convertToCanvas(bitmapData.image);
			}
			source = bitmapData.image.get_src();
			cacheBitmapData = bitmapData;
		}
		context.globalAlpha = tilemap.__worldAlpha * alpha;
		tileTransform = tile1.get_matrix();
		tileTransform.concat(transform);
		if(roundPixels) {
			context.setTransform(tileTransform.a,tileTransform.b,tileTransform.c,tileTransform.d,(Std().default)["int"](tileTransform.tx),(Std().default)["int"](tileTransform.ty));
		} else {
			context.setTransform(tileTransform.a,tileTransform.b,tileTransform.c,tileTransform.d,tileTransform.tx,tileTransform.ty);
		}
		context.drawImage(source,tileRect.x,tileRect.y,tileRect.width,tileRect.height,0,0,tileRect.width,tileRect.height);
	}
	if(!renderSession.allowSmoothing || !tilemap.smoothing) {
		context.mozImageSmoothingEnabled = true;
		context.msImageSmoothingEnabled = true;
		context.imageSmoothingEnabled = true;
	}
	renderSession.maskManager.popRect();
	renderSession.maskManager.popObject(tilemap);
	(openfl_geom_Rectangle().default).__pool.release(rect);
	(openfl_geom_Rectangle().default).__pool.release(tileRect);
}


// Export

exports.default = CanvasTilemap;