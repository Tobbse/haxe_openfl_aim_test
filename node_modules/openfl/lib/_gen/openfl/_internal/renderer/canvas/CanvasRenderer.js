// Class: openfl._internal.renderer.canvas.CanvasRenderer

var $global = typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this

$global.Object.defineProperty(exports, "__esModule", {value: true});

var __map_reserved = {};

// Imports

var $hxClasses = require("./../../../../hxClasses_stub").default;
var $import = require("./../../../../import_stub").default;
var $extend = require("./../../../../extend_stub").default;
function openfl__$internal_renderer_AbstractRenderer() {return require("./../../../../openfl/_internal/renderer/AbstractRenderer");}
function openfl__$internal_renderer_RenderSession() {return require("./../../../../openfl/_internal/renderer/RenderSession");}
function lime_graphics_RendererType() {return require("./../../../../lime/graphics/RendererType");}
function openfl__$internal_renderer_canvas_CanvasBlendModeManager() {return require("./../../../../openfl/_internal/renderer/canvas/CanvasBlendModeManager");}
function openfl__$internal_renderer_canvas_CanvasMaskManager() {return require("./../../../../openfl/_internal/renderer/canvas/CanvasMaskManager");}
function Reflect() {return require("./../../../../Reflect");}

// Constructor

var CanvasRenderer = function(stage,context) {
	(openfl__$internal_renderer_AbstractRenderer().default).call(this,stage);
	this.context = context;
	this.renderSession = new (openfl__$internal_renderer_RenderSession().default)();
	this.renderSession.clearRenderDirty = true;
	this.renderSession.context = context;
	this.renderSession.renderer = this;
	this.renderSession.renderType = (lime_graphics_RendererType().default).CANVAS;
	this.renderSession.blendModeManager = new (openfl__$internal_renderer_canvas_CanvasBlendModeManager().default)(this.renderSession);
	this.renderSession.maskManager = new (openfl__$internal_renderer_canvas_CanvasMaskManager().default)(this.renderSession);
	var config = stage.window.config;
	if(config != null && (Reflect().default).hasField(config,"allowHighDPI") && config.allowHighDPI) {
		CanvasRenderer.scale = window.devicePixelRatio || 1;
	}
}

// Meta

CanvasRenderer.__name__ = ["openfl","_internal","renderer","canvas","CanvasRenderer"];
CanvasRenderer.__super__ = (openfl__$internal_renderer_AbstractRenderer().default);
CanvasRenderer.prototype = $extend((openfl__$internal_renderer_AbstractRenderer().default).prototype, {
	clear: function() {
		this.renderSession.blendModeManager.setBlendMode("normal");
		this.context.setTransform(1,0,0,1,0,0);
		this.context.globalAlpha = 1;
		if(!this.stage.__transparent && this.stage.__clearBeforeRender) {
			this.context.fillStyle = this.stage.__colorString;
			this.context.fillRect(0,0,this.stage.stageWidth * this.stage.window.get_scale(),this.stage.stageHeight * this.stage.window.get_scale());
		} else if(this.stage.__transparent && this.stage.__clearBeforeRender) {
			this.context.clearRect(0,0,this.stage.stageWidth * this.stage.window.get_scale(),this.stage.stageHeight * this.stage.window.get_scale());
		}
	},
	render: function() {
		this.renderSession.allowSmoothing = this.stage.quality != "low";
		this.stage.__renderCanvas(this.renderSession);
	},
	renderStage3D: function() {
		var _g = 0;
		var _g1 = this.stage.stage3Ds;
		while(_g < _g1.get_length()) {
			var stage3D = _g1.get(_g);
			++_g;
			stage3D.__renderCanvas(this.stage,this.renderSession);
		}
	}
});
CanvasRenderer.prototype.__class__ = $hxClasses["openfl._internal.renderer.canvas.CanvasRenderer"] = CanvasRenderer;

// Init



// Statics


CanvasRenderer.scale = 1

// Export

exports.default = CanvasRenderer;