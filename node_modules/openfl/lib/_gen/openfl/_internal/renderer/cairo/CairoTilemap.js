// Class: openfl._internal.renderer.cairo.CairoTilemap

var $global = typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this

$global.Object.defineProperty(exports, "__esModule", {value: true});

var __map_reserved = {};

// Imports

var $hxClasses = require("./../../../../hxClasses_stub").default;
var $import = require("./../../../../import_stub").default;
function openfl_geom_Rectangle() {return require("./../../../../openfl/geom/Rectangle");}
function lime_math_Matrix3() {return require("./../../../../lime/math/Matrix3");}
function lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$() {return require("./../../../../lime/graphics/cairo/_CairoPattern/CairoPattern_Impl_");}

// Constructor

var CairoTilemap = function(){}

// Meta

CairoTilemap.__name__ = ["openfl","_internal","renderer","cairo","CairoTilemap"];
CairoTilemap.prototype = {
	
};
CairoTilemap.prototype.__class__ = $hxClasses["openfl._internal.renderer.cairo.CairoTilemap"] = CairoTilemap;

// Init



// Statics

CairoTilemap.render = function(tilemap,renderSession) {
	if(!tilemap.__renderable || tilemap.__worldAlpha <= 0) {
		return;
	}
	tilemap.__updateTileArray();
	if(tilemap.__tileArray == null || tilemap.__tileArray.get_length() == 0) {
		return;
	}
	var cairo = renderSession.cairo;
	renderSession.blendModeManager.setBlendMode(tilemap.__worldBlendMode);
	renderSession.maskManager.pushObject(tilemap);
	var rect = (openfl_geom_Rectangle().default).__pool.get();
	rect.setTo(0,0,tilemap.__width,tilemap.__height);
	renderSession.maskManager.pushRect(rect,tilemap.__renderTransform);
	var transform = tilemap.__renderTransform;
	var roundPixels = renderSession.roundPixels;
	var defaultTileset = tilemap.__tileset;
	var cacheBitmapData = null;
	var surface = null;
	var pattern = null;
	var alpha;
	var visible;
	var tileset;
	var id;
	var tileData;
	var bitmapData;
	var tileArray = tilemap.__tileArray;
	var matrix = new (lime_math_Matrix3().default)();
	var tileTransform;
	var tileRect = null;
	var tile = tileArray.iterator();
	while(tile.hasNext()) {
		var tile1 = tile.next();
		alpha = tile1.get_alpha();
		visible = tile1.get_visible();
		if(!visible || alpha <= 0) {
			continue;
		}
		tileset = tile1.get_tileset();
		if(tileset == null) {
			tileset = defaultTileset;
		}
		if(tileset == null) {
			continue;
		}
		id = tile1.get_id();
		if(id == -1) {
			tileRect = tile1.get_rect();
			if(tileRect.width <= 0 || tileRect.height <= 0) {
				continue;
			}
		} else {
			tileData = tileset.__data[id];
			if(tileData == null) {
				continue;
			}
			rect.setTo(tileData.x,tileData.y,tileData.width,tileData.height);
			tile1.set_rect(rect);
			tileRect = rect;
		}
		bitmapData = tileset.get_bitmapData();
		if(bitmapData == null) {
			continue;
		}
		if(bitmapData != cacheBitmapData) {
			surface = bitmapData.getSurface();
			pattern = (lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$().default).createForSurface(surface);
			(lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$().default).set_filter(pattern,renderSession.allowSmoothing && tilemap.smoothing ? 1 : 3);
			cairo.set_source(pattern);
			cacheBitmapData = bitmapData;
		}
		tileTransform = tile1.get_matrix();
		tileTransform.concat(transform);
		if(roundPixels) {
			tileTransform.tx = Math.round(tileTransform.tx);
			tileTransform.ty = Math.round(tileTransform.ty);
		}
		cairo.set_matrix(tileTransform.__toMatrix3());
		matrix.tx = tileRect.x;
		matrix.ty = tileRect.y;
		(lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$().default).set_matrix(pattern,matrix);
		cairo.set_source(pattern);
		cairo.save();
		cairo.newPath();
		cairo.rectangle(0,0,tileRect.width,tileRect.height);
		cairo.clip();
		if(tilemap.__worldAlpha == 1 && alpha == 1) {
			cairo.paint();
		} else {
			cairo.paintWithAlpha(tilemap.__worldAlpha * alpha);
		}
		cairo.restore();
	}
	renderSession.maskManager.popRect();
	renderSession.maskManager.popObject(tilemap);
	(openfl_geom_Rectangle().default).__pool.release(rect);
}


// Export

exports.default = CairoTilemap;