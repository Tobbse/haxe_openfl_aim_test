// Class: openfl._internal.renderer.opengl.GLRenderer

var $global = typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this

$global.Object.defineProperty(exports, "__esModule", {value: true});

var __map_reserved = {};

// Imports

var $hxClasses = require("./../../../../hxClasses_stub").default;
var $import = require("./../../../../import_stub").default;
var $extend = require("./../../../../extend_stub").default;
function openfl__$internal_renderer_AbstractRenderer() {return require("./../../../../openfl/_internal/renderer/AbstractRenderer");}
function openfl_geom_Matrix() {return require("./../../../../openfl/geom/Matrix");}
function lime_math__$Matrix4_Matrix4_$Impl_$() {return require("./../../../../lime/math/_Matrix4/Matrix4_Impl_");}
function openfl_display_BitmapData() {return require("./../../../../openfl/display/BitmapData");}
function openfl_display_Graphics() {return require("./../../../../openfl/display/Graphics");}
function openfl__$internal_renderer_RenderSession() {return require("./../../../../openfl/_internal/renderer/RenderSession");}
function lime_graphics_RendererType() {return require("./../../../../lime/graphics/RendererType");}
function openfl__$internal_renderer_opengl_GLBlendModeManager() {return require("./../../../../openfl/_internal/renderer/opengl/GLBlendModeManager");}
function openfl__$internal_renderer_opengl_GLFilterManager() {return require("./../../../../openfl/_internal/renderer/opengl/GLFilterManager");}
function openfl__$internal_renderer_opengl_GLShaderManager() {return require("./../../../../openfl/_internal/renderer/opengl/GLShaderManager");}
function openfl__$internal_renderer_opengl_GLMaskManager() {return require("./../../../../openfl/_internal/renderer/opengl/GLMaskManager");}

// Constructor

var GLRenderer = function(stage,gl,defaultRenderTarget) {
	(openfl__$internal_renderer_AbstractRenderer().default).call(this,stage);
	this.gl = gl;
	this.defaultRenderTarget = defaultRenderTarget;
	this.flipped = defaultRenderTarget == null;
	if((openfl_display_Graphics().default).maxTextureWidth == null) {
		(openfl_display_Graphics().default).maxTextureWidth = (openfl_display_Graphics().default).maxTextureHeight = gl.getInteger(gl.MAX_TEXTURE_SIZE);
	}
	this.matrix = (lime_math__$Matrix4_Matrix4_$Impl_$().default)._new();
	this.values = [];
	this.renderSession = new (openfl__$internal_renderer_RenderSession().default)();
	this.renderSession.clearRenderDirty = true;
	this.renderSession.gl = gl;
	this.renderSession.renderer = this;
	this.renderSession.renderType = (lime_graphics_RendererType().default).OPENGL;
	this.renderSession.blendModeManager = new (openfl__$internal_renderer_opengl_GLBlendModeManager().default)(gl);
	this.renderSession.filterManager = new (openfl__$internal_renderer_opengl_GLFilterManager().default)(this,this.renderSession);
	this.renderSession.shaderManager = new (openfl__$internal_renderer_opengl_GLShaderManager().default)(gl);
	this.renderSession.maskManager = new (openfl__$internal_renderer_opengl_GLMaskManager().default)(this.renderSession);
	if(stage.window != null) {
		if(stage.stage3Ds.get(0).context3D == null) {
			stage.stage3Ds.get(0).__createContext(stage,this.renderSession);
		}
		var width = defaultRenderTarget != null ? defaultRenderTarget.width : Math.ceil(stage.window.get_width() * stage.window.get_scale());
		var height = defaultRenderTarget != null ? defaultRenderTarget.height : Math.ceil(stage.window.get_height() * stage.window.get_scale());
		this.resize(width,height);
	}
}

// Meta

GLRenderer.__name__ = ["openfl","_internal","renderer","opengl","GLRenderer"];
GLRenderer.__super__ = (openfl__$internal_renderer_AbstractRenderer().default);
GLRenderer.prototype = $extend((openfl__$internal_renderer_AbstractRenderer().default).prototype, {
	clear: function() {
		if(this.stage.__transparent) {
			this.gl.clearColor(0,0,0,0);
		} else {
			this.gl.clearColor(this.stage.__colorSplit[0],this.stage.__colorSplit[1],this.stage.__colorSplit[2],1);
		}
		this.gl.clear(this.gl.COLOR_BUFFER_BIT);
	},
	getCacheObject: function() {
	},
	getMatrix: function(transform) {
		var _matrix = (openfl_geom_Matrix().default).__pool.get();
		_matrix.copyFrom(transform);
		_matrix.concat(this.displayMatrix);
		if(this.renderSession.roundPixels) {
			_matrix.tx = Math.round(_matrix.tx);
			_matrix.ty = Math.round(_matrix.ty);
		}
		(lime_math__$Matrix4_Matrix4_$Impl_$().default).identity(this.matrix);
		(lime_math__$Matrix4_Matrix4_$Impl_$().default).set(this.matrix,0,_matrix.a);
		(lime_math__$Matrix4_Matrix4_$Impl_$().default).set(this.matrix,1,_matrix.b);
		(lime_math__$Matrix4_Matrix4_$Impl_$().default).set(this.matrix,4,_matrix.c);
		(lime_math__$Matrix4_Matrix4_$Impl_$().default).set(this.matrix,5,_matrix.d);
		(lime_math__$Matrix4_Matrix4_$Impl_$().default).set(this.matrix,12,_matrix.tx);
		(lime_math__$Matrix4_Matrix4_$Impl_$().default).set(this.matrix,13,_matrix.ty);
		(lime_math__$Matrix4_Matrix4_$Impl_$().default).append(this.matrix,this.flipped ? this.projectionFlipped : this.projection);
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			this.values[i] = (lime_math__$Matrix4_Matrix4_$Impl_$().default).get(this.matrix,i);
		}
		(openfl_geom_Matrix().default).__pool.release(_matrix);
		return this.values;
	},
	getRenderTarget: function(framebuffer) {
		if(framebuffer) {
			if(this.renderTargetA == null) {
				this.renderTargetA = (openfl_display_BitmapData().default).fromTexture(this.stage.stage3Ds.get(0).context3D.createRectangleTexture(this.width,this.height,"bgra",true));
				this.gl.bindTexture(this.gl.TEXTURE_2D,this.renderTargetA.getTexture(this.gl));
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE);
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE);
			}
			if(this.renderTargetB == null) {
				this.renderTargetB = (openfl_display_BitmapData().default).fromTexture(this.stage.stage3Ds.get(0).context3D.createRectangleTexture(this.width,this.height,"bgra",true));
				this.gl.bindTexture(this.gl.TEXTURE_2D,this.renderTargetB.getTexture(this.gl));
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE);
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE);
			}
			if(this.currentRenderTarget == this.renderTargetA) {
				this.currentRenderTarget = this.renderTargetB;
			} else {
				this.currentRenderTarget = this.renderTargetA;
			}
			this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this.currentRenderTarget.__getFramebuffer(this.gl));
			this.gl.viewport(0,0,this.width,this.height);
			this.gl.clearColor(0,0,0,0);
			this.gl.clear(this.gl.COLOR_BUFFER_BIT);
			this.flipped = false;
		} else {
			this.currentRenderTarget = this.defaultRenderTarget;
			var frameBuffer = this.currentRenderTarget != null ? this.currentRenderTarget.__getFramebuffer(this.gl) : null;
			this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,frameBuffer);
			this.flipped = this.currentRenderTarget == null;
		}
	},
	render: function() {
		this.gl.viewport(this.offsetX,this.offsetY,this.displayWidth,this.displayHeight);
		this.renderSession.allowSmoothing = this.stage.quality != "low";
		this.renderSession.upscaled = this.displayMatrix.a != 1 || this.displayMatrix.d != 1;
		this.stage.__renderGL(this.renderSession);
		if(this.offsetX > 0 || this.offsetY > 0) {
			this.gl.clearColor(0,0,0,1);
			this.gl.enable(this.gl.SCISSOR_TEST);
			if(this.offsetX > 0) {
				this.gl.scissor(0,0,this.offsetX,this.height);
				this.gl.clear(this.gl.COLOR_BUFFER_BIT);
				this.gl.scissor(this.offsetX + this.displayWidth,0,this.width,this.height);
				this.gl.clear(this.gl.COLOR_BUFFER_BIT);
			}
			if(this.offsetY > 0) {
				this.gl.scissor(0,0,this.width,this.offsetY);
				this.gl.clear(this.gl.COLOR_BUFFER_BIT);
				this.gl.scissor(0,this.offsetY + this.displayHeight,this.width,this.height);
				this.gl.clear(this.gl.COLOR_BUFFER_BIT);
			}
			this.gl.disable(this.gl.SCISSOR_TEST);
		}
	},
	renderStage3D: function() {
		var _g = 0;
		var _g1 = this.stage.stage3Ds;
		while(_g < _g1.get_length()) {
			var stage3D = _g1.get(_g);
			++_g;
			stage3D.__renderGL(this.stage,this.renderSession);
		}
	},
	resize: function(width,height) {
		(openfl__$internal_renderer_AbstractRenderer().default).prototype.resize.call(this,width,height);
		if(width > 0 && height > 0) {
			if(this.renderTargetA != null && (this.renderTargetA.width != width || this.renderTargetA.height != height)) {
				this.renderTargetA = (openfl_display_BitmapData().default).fromTexture(this.stage.stage3Ds.get(0).context3D.createRectangleTexture(width,height,"bgra",true));
				this.gl.bindTexture(this.gl.TEXTURE_2D,this.renderTargetA.getTexture(this.gl));
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE);
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE);
			}
			if(this.renderTargetB != null && (this.renderTargetB.width != width || this.renderTargetB.height != height)) {
				this.renderTargetB = (openfl_display_BitmapData().default).fromTexture(this.stage.stage3Ds.get(0).context3D.createRectangleTexture(width,height,"bgra",true));
				this.gl.bindTexture(this.gl.TEXTURE_2D,this.renderTargetB.getTexture(this.gl));
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE);
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE);
			}
		}
		this.displayMatrix = this.defaultRenderTarget == null ? this.stage.__displayMatrix : new (openfl_geom_Matrix().default)();
		var w = this.defaultRenderTarget == null ? this.stage.stageWidth : this.defaultRenderTarget.width;
		var h = this.defaultRenderTarget == null ? this.stage.stageHeight : this.defaultRenderTarget.height;
		this.offsetX = Math.round(this.displayMatrix.__transformX(0,0));
		this.offsetY = Math.round(this.displayMatrix.__transformY(0,0));
		this.displayWidth = Math.round(this.displayMatrix.__transformX(w,0) - this.offsetX);
		this.displayHeight = Math.round(this.displayMatrix.__transformY(0,h) - this.offsetY);
		this.projection = (lime_math__$Matrix4_Matrix4_$Impl_$().default).createOrtho(this.offsetX,this.displayWidth + this.offsetX,this.offsetY,this.displayHeight + this.offsetY,-1000,1000);
		this.projectionFlipped = (lime_math__$Matrix4_Matrix4_$Impl_$().default).createOrtho(this.offsetX,this.displayWidth + this.offsetX,this.displayHeight + this.offsetY,this.offsetY,-1000,1000);
	}
});
GLRenderer.prototype.__class__ = $hxClasses["openfl._internal.renderer.opengl.GLRenderer"] = GLRenderer;

// Init



// Statics




// Export

exports.default = GLRenderer;