// Class: openfl._internal.renderer.opengl.GLFilterManager

var $global = typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this

$global.Object.defineProperty(exports, "__esModule", {value: true});

var __map_reserved = {};

// Imports

var $hxClasses = require("./../../../../hxClasses_stub").default;
var $import = require("./../../../../import_stub").default;
var $extend = require("./../../../../extend_stub").default;
function openfl__$internal_renderer_AbstractFilterManager() {return require("./../../../../openfl/_internal/renderer/AbstractFilterManager");}
function lime_utils__$DataPointer_DataPointer_$Impl_$() {return require("./../../../../lime/utils/_DataPointer/DataPointer_Impl_");}
function openfl_geom_Matrix() {return require("./../../../../openfl/geom/Matrix");}

// Constructor

var GLFilterManager = function(renderer,renderSession) {
	(openfl__$internal_renderer_AbstractFilterManager().default).call(this,renderSession);
	this.renderer = renderer;
	this.gl = renderSession.gl;
	this.filterDepth = 0;
	this.matrix = new (openfl_geom_Matrix().default)();
}

// Meta

GLFilterManager.__name__ = ["openfl","_internal","renderer","opengl","GLFilterManager"];
GLFilterManager.__super__ = (openfl__$internal_renderer_AbstractFilterManager().default);
GLFilterManager.prototype = $extend((openfl__$internal_renderer_AbstractFilterManager().default).prototype, {
	pushObject: function(object) {
		return this.renderSession.shaderManager.defaultShader;
	},
	popObject: function(object) {
		return;
	},
	renderPass: function(target,shader) {
		if(target == null || shader == null) {
			return;
		}
		shader.get_data().uImage0.input = target;
		var tmp = this.renderSession.allowSmoothing && this.renderSession.upscaled;
		shader.get_data().uImage0.smoothing = tmp;
		shader.get_data().uMatrix.value = this.renderer.getMatrix(this.matrix);
		if(shader.get_data().uColorTransform != null) {
			if(shader.get_data().uColorTransform.value == null) {
				shader.get_data().uColorTransform.value = [];
			}
			shader.get_data().uColorTransform.value[0] = false;
		}
		this.renderSession.shaderManager.setShader(shader);
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,target.getBuffer(this.gl,1,null));
		this.gl.vertexAttribPointer(shader.get_data().aPosition.index,3,this.gl.FLOAT,false,104,(lime_utils__$DataPointer_DataPointer_$Impl_$().default).fromInt(0));
		this.gl.vertexAttribPointer(shader.get_data().aTexCoord.index,2,this.gl.FLOAT,false,104,(lime_utils__$DataPointer_DataPointer_$Impl_$().default).fromInt(12));
		this.gl.vertexAttribPointer(shader.get_data().aAlpha.index,1,this.gl.FLOAT,false,104,(lime_utils__$DataPointer_DataPointer_$Impl_$().default).fromInt(20));
		this.gl.drawArrays(this.gl.TRIANGLE_STRIP,0,4);
	}
});
GLFilterManager.prototype.__class__ = $hxClasses["openfl._internal.renderer.opengl.GLFilterManager"] = GLFilterManager;

// Init



// Statics




// Export

exports.default = GLFilterManager;