// Class: openfl.display._ShaderParameterType.ShaderParameterType_Impl_

var $global = typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this

$global.Object.defineProperty(exports, "__esModule", {value: true});

var __map_reserved = {};

// Imports

var $hxClasses = require("./../../../hxClasses_stub").default;

// Constructor

var ShaderParameterType_Impl_ = function(){}

// Meta

ShaderParameterType_Impl_.__name__ = ["openfl","display","_ShaderParameterType","ShaderParameterType_Impl_"];
ShaderParameterType_Impl_.prototype = {
	
};
ShaderParameterType_Impl_.prototype.__class__ = $hxClasses["openfl.display._ShaderParameterType.ShaderParameterType_Impl_"] = ShaderParameterType_Impl_;

// Init



// Statics

ShaderParameterType_Impl_.fromString = function(value) {
	switch(value) {
	case "bool":
		return 0;
	case "bool2":
		return 1;
	case "bool3":
		return 1;
	case "bool4":
		return 1;
	case "float":
		return 4;
	case "float2":
		return 5;
	case "float3":
		return 6;
	case "float4":
		return 7;
	case "int":
		return 8;
	case "int2":
		return 9;
	case "int3":
		return 10;
	case "int4":
		return 11;
	case "matrix2x2":
		return 12;
	case "matrix2x3":
		return 13;
	case "matrix2x4":
		return 14;
	case "matrix3x2":
		return 15;
	case "matrix3x3":
		return 16;
	case "matrix3x4":
		return 17;
	case "matrix4x2":
		return 18;
	case "matrix4x3":
		return 19;
	case "matrix4x4":
		return 20;
	default:
		return null;
	}
}
ShaderParameterType_Impl_.toString = function(value) {
	switch(value) {
	case 0:
		return "bool";
	case 1:
		return "bool2";
	case 2:
		return "bool3";
	case 3:
		return "bool4";
	case 4:
		return "float";
	case 5:
		return "float2";
	case 6:
		return "float3";
	case 7:
		return "float4";
	case 8:
		return "int";
	case 9:
		return "int2";
	case 10:
		return "int3";
	case 11:
		return "int4";
	case 12:
		return "matrix2x2";
	case 13:
		return "matrix2x3";
	case 14:
		return "matrix2x4";
	case 15:
		return "matrix3x2";
	case 16:
		return "matrix3x3";
	case 17:
		return "matrix3x4";
	case 18:
		return "matrix4x2";
	case 19:
		return "matrix4x3";
	case 20:
		return "matrix4x4";
	default:
		return null;
	}
}
ShaderParameterType_Impl_.BOOL = 0
ShaderParameterType_Impl_.BOOL2 = 1
ShaderParameterType_Impl_.BOOL3 = 2
ShaderParameterType_Impl_.BOOL4 = 3
ShaderParameterType_Impl_.FLOAT = 4
ShaderParameterType_Impl_.FLOAT2 = 5
ShaderParameterType_Impl_.FLOAT3 = 6
ShaderParameterType_Impl_.FLOAT4 = 7
ShaderParameterType_Impl_.INT = 8
ShaderParameterType_Impl_.INT2 = 9
ShaderParameterType_Impl_.INT3 = 10
ShaderParameterType_Impl_.INT4 = 11
ShaderParameterType_Impl_.MATRIX2X2 = 12
ShaderParameterType_Impl_.MATRIX2X3 = 13
ShaderParameterType_Impl_.MATRIX2X4 = 14
ShaderParameterType_Impl_.MATRIX3X2 = 15
ShaderParameterType_Impl_.MATRIX3X3 = 16
ShaderParameterType_Impl_.MATRIX3X4 = 17
ShaderParameterType_Impl_.MATRIX4X2 = 18
ShaderParameterType_Impl_.MATRIX4X3 = 19
ShaderParameterType_Impl_.MATRIX4X4 = 20

// Export

exports.default = ShaderParameterType_Impl_;