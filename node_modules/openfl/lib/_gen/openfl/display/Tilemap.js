// Class: openfl.display.Tilemap

var $global = typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this

$global.Object.defineProperty(exports, "__esModule", {value: true});

var __map_reserved = {};

// Imports

var $hxClasses = require("./../../hxClasses_stub").default;
var $import = require("./../../import_stub").default;
var $extend = require("./../../extend_stub").default;
function openfl_display_IShaderDrawable() {return require("./../../openfl/display/IShaderDrawable");}
function openfl_display_DisplayObject() {return require("./../../openfl/display/DisplayObject");}
function openfl_display_Tile() {return require("./../../openfl/display/Tile");}
function openfl_display_TileArray() {return require("./../../openfl/display/TileArray");}
function openfl_geom_Rectangle() {return require("./../../openfl/geom/Rectangle");}
function openfl__$internal_renderer_canvas_CanvasBitmap() {return require("./../../openfl/_internal/renderer/canvas/CanvasBitmap");}
function openfl__$internal_renderer_canvas_CanvasDisplayObject() {return require("./../../openfl/_internal/renderer/canvas/CanvasDisplayObject");}
function openfl__$internal_renderer_canvas_CanvasTilemap() {return require("./../../openfl/_internal/renderer/canvas/CanvasTilemap");}
function openfl__$internal_renderer_dom_DOMBitmap() {return require("./../../openfl/_internal/renderer/dom/DOMBitmap");}
function openfl__$internal_renderer_dom_DOMDisplayObject() {return require("./../../openfl/_internal/renderer/dom/DOMDisplayObject");}
function openfl__$internal_renderer_dom_DOMTilemap() {return require("./../../openfl/_internal/renderer/dom/DOMTilemap");}
function openfl__$internal_renderer_flash_FlashTilemap() {return require("./../../openfl/_internal/renderer/flash/FlashTilemap");}
function openfl__$internal_renderer_opengl_GLBitmap() {return require("./../../openfl/_internal/renderer/opengl/GLBitmap");}
function openfl__$internal_renderer_opengl_GLDisplayObject() {return require("./../../openfl/_internal/renderer/opengl/GLDisplayObject");}
function openfl__$internal_renderer_opengl_GLTilemap() {return require("./../../openfl/_internal/renderer/opengl/GLTilemap");}
function Std() {return require("./../../Std");}
function openfl__$Vector_Vector_$Impl_$() {return require("./../../openfl/_Vector/Vector_Impl_");}

// Constructor

var Tilemap = function(width,height,tileset,smoothing) {
	if(smoothing == null) {
		smoothing = true;
	}
	(openfl_display_DisplayObject().default).call(this);
	this.__tileset = tileset;
	this.smoothing = smoothing;
	this.__tiles = (openfl__$Vector_Vector_$Impl_$().default)._new();
	this.numTiles = 0;
	this.__width = width;
	this.__height = height;
}

// Meta

Tilemap.__name__ = ["openfl","display","Tilemap"];
Tilemap.__interfaces__ = [(openfl_display_IShaderDrawable().default)];
Tilemap.__super__ = (openfl_display_DisplayObject().default);
Tilemap.prototype = $extend((openfl_display_DisplayObject().default).prototype, {
	addTile: function(tile) {
		if(tile == null) {
			return null;
		}
		if(tile.parent == this) {
			this.removeTile(tile);
		}
		this.__tiles.set(this.numTiles,tile);
		tile.parent = this;
		this.numTiles++;
		this.__setRenderDirty();
		return tile;
	},
	addTileAt: function(tile,index) {
		if(tile == null) {
			return null;
		}
		if(tile.parent == this) {
			var cacheLength = this.__tiles.get_length();
			this.removeTile(tile);
			if(cacheLength > this.__tiles.get_length()) {
				--index;
			}
		}
		this.__tiles.insertAt(index,tile);
		tile.parent = this;
		this.__tileArrayDirty = true;
		this.numTiles++;
		this.__setRenderDirty();
		return tile;
	},
	addTiles: function(tiles) {
		var _g = 0;
		while(_g < tiles.length) {
			var tile = tiles[_g];
			++_g;
			this.addTile(tile);
		}
		return tiles;
	},
	contains: function(tile) {
		return this.__tiles.indexOf(tile,0) > -1;
	},
	getTileAt: function(index) {
		if(index >= 0 && index < this.numTiles) {
			var tile = this.__tiles.get(index);
			if(tile == null && this.__tileArray != null && index < this.__tileArray.get_length()) {
				tile = (openfl_display_Tile().default).__fromTileArray(index,this.__tileArray);
				this.__tiles.set(index,tile);
			}
			return this.__tiles.get(index);
		}
		return null;
	},
	getTileIndex: function(tile) {
		var _g1 = 0;
		var _g = this.__tiles.get_length();
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__tiles.get(i) == tile) {
				return i;
			}
		}
		return -1;
	},
	getTiles: function() {
		this.__updateTileArray();
		if(this.__tileArray == null) {
			this.__tileArray = new (openfl_display_TileArray().default)();
		}
		return this.__tileArray;
	},
	removeTile: function(tile) {
		if(tile != null && tile.parent == this) {
			var cacheLength = this.__tiles.get_length();
			var _g1 = 0;
			var _g = this.__tiles.get_length();
			while(_g1 < _g) {
				var i = _g1++;
				if(this.__tiles.get(i) == tile) {
					tile.parent = null;
					this.__tiles.splice(i,1);
					break;
				}
			}
			this.__tileArrayDirty = true;
			if(cacheLength > this.__tiles.get_length()) {
				this.numTiles--;
			}
			if(this.numTiles <= 0 && this.__tileArray != null) {
				this.__tileArray.set_length(0);
			}
			this.__setRenderDirty();
		}
		return tile;
	},
	removeTileAt: function(index) {
		if(index >= 0 && index < this.numTiles) {
			return this.removeTile(this.__tiles.get(index));
		}
		return null;
	},
	removeTiles: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 2147483647;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		if(beginIndex < 0) {
			beginIndex = 0;
		}
		if(endIndex > this.__tiles.get_length() - 1) {
			endIndex = this.__tiles.get_length() - 1;
		}
		var removed = this.__tiles.splice(beginIndex,endIndex - beginIndex + 1);
		var _g = 0;
		while(_g < removed.get_length()) {
			var tile = removed.get(_g);
			++_g;
			tile.parent = null;
		}
		this.__tileArrayDirty = true;
		this.numTiles = this.__tiles.get_length();
		if(this.numTiles == 0 && this.__tileArray != null) {
			this.__tileArray.set_length(0);
		}
		this.__setRenderDirty();
	},
	setTiles: function(tileArray) {
		this.__tileArray = tileArray;
		this.numTiles = this.__tileArray.get_length();
		this.__tileArray.__bufferDirty = true;
		this.__tileArrayDirty = false;
		this.__tiles.set_length(0);
		this.__setRenderDirty();
	},
	__getBounds: function(rect,matrix) {
		var bounds = (openfl_geom_Rectangle().default).__pool.get();
		bounds.setTo(0,0,this.__width,this.__height);
		bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		(openfl_geom_Rectangle().default).__pool.release(bounds);
	},
	__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		var px = this.__renderTransform.__transformInverseX(x,y);
		var py = this.__renderTransform.__transformInverseY(x,y);
		if(px > 0 && py > 0 && px <= this.__width && py <= this.__height) {
			if(stack != null && !interactiveOnly) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	},
	__renderCairo: function(renderSession) {
	},
	__renderCanvas: function(renderSession) {
		this.__updateCacheBitmap(renderSession,!this.__worldColorTransform.__isDefault());
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			(openfl__$internal_renderer_canvas_CanvasBitmap().default).render(this.__cacheBitmap,renderSession);
		} else {
			(openfl__$internal_renderer_canvas_CanvasDisplayObject().default).render(this,renderSession);
			(openfl__$internal_renderer_canvas_CanvasTilemap().default).render(this,renderSession);
		}
	},
	__renderDOM: function(renderSession) {
		this.__updateCacheBitmap(renderSession,!this.__worldColorTransform.__isDefault());
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			this.__renderDOMClear(renderSession);
			this.__cacheBitmap.stage = this.stage;
			(openfl__$internal_renderer_dom_DOMBitmap().default).render(this.__cacheBitmap,renderSession);
		} else {
			(openfl__$internal_renderer_dom_DOMDisplayObject().default).render(this,renderSession);
			(openfl__$internal_renderer_dom_DOMTilemap().default).render(this,renderSession);
		}
	},
	__renderDOMClear: function(renderSession) {
		(openfl__$internal_renderer_dom_DOMTilemap().default).clear(this,renderSession);
	},
	__renderFlash: function() {
		(openfl__$internal_renderer_flash_FlashTilemap().default).render(this);
	},
	__renderGL: function(renderSession) {
		this.__updateCacheBitmap(renderSession,false);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			(openfl__$internal_renderer_opengl_GLBitmap().default).render(this.__cacheBitmap,renderSession);
		} else {
			(openfl__$internal_renderer_opengl_GLDisplayObject().default).render(this,renderSession);
			(openfl__$internal_renderer_opengl_GLTilemap().default).render(this,renderSession);
		}
	},
	__renderGLMask: function(renderSession) {
		this.__updateCacheBitmap(renderSession,false);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			(openfl__$internal_renderer_opengl_GLBitmap().default).renderMask(this.__cacheBitmap,renderSession);
		} else {
			(openfl__$internal_renderer_opengl_GLDisplayObject().default).renderMask(this,renderSession);
			(openfl__$internal_renderer_opengl_GLTilemap().default).renderMask(this,renderSession);
		}
	},
	__updateCacheBitmap: function(renderSession,force) {
		if(this.get_filters() == null) {
			return false;
		}
		return (openfl_display_DisplayObject().default).prototype.__updateCacheBitmap.call(this,renderSession,force);
	},
	__updateTileArray: function() {
		if(this.__tiles.get_length() > 0) {
			if(this.__tileArray == null) {
				this.__tileArray = new (openfl_display_TileArray().default)();
			}
			this.__tileArray.set_length(this.numTiles);
			var tile;
			var _g1 = 0;
			var _g = this.__tiles.get_length();
			while(_g1 < _g) {
				var i = _g1++;
				tile = this.__tiles.get(i);
				if(tile != null) {
					tile.__updateTileArray(i,this.__tileArray,this.__tileArrayDirty);
				}
			}
		}
		this.__tileArrayDirty = false;
	},
	get_height: function() {
		return this.__height * Math.abs(this.get_scaleY());
	},
	set_height: function(value) {
		this.__height = (Std().default)["int"](value);
		return this.__height * Math.abs(this.get_scaleY());
	},
	get_tileset: function() {
		return this.__tileset;
	},
	set_tileset: function(value) {
		this.__tileArrayDirty = true;
		return this.__tileset = value;
	},
	get_width: function() {
		return this.__width * Math.abs(this.__scaleX);
	},
	set_width: function(value) {
		this.__width = (Std().default)["int"](value);
		return this.__width * Math.abs(this.__scaleX);
	}
});
Tilemap.prototype.__class__ = $hxClasses["openfl.display.Tilemap"] = Tilemap;

// Init

Object.defineProperty(Tilemap.prototype,"tileset",{ get : function () { return this.get_tileset (); }, set : function (v) { return this.set_tileset (v); }});

// Statics




// Export

exports.default = Tilemap;