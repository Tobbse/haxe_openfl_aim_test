// Class: openfl.display.Shader

var $global = typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this

$global.Object.defineProperty(exports, "__esModule", {value: true});

var __map_reserved = {};

// Imports

var $hxClasses = require("./../../hxClasses_stub").default;
var $import = require("./../../import_stub").default;
function lime_graphics_opengl_GLContextType() {return require("./../../lime/graphics/opengl/GLContextType");}
function openfl_display_ShaderData() {return require("./../../openfl/display/ShaderData");}
function haxe_ds_StringMap() {return require("./../../haxe/ds/StringMap");}
function lime_utils_GLUtils() {return require("./../../lime/utils/GLUtils");}
function EReg() {return require("./../../EReg");}
function StringTools() {return require("./../../StringTools");}
function openfl_display_ShaderInput() {return require("./../../openfl/display/ShaderInput");}
function Reflect() {return require("./../../Reflect");}
function openfl_display_ShaderParameter() {return require("./../../openfl/display/ShaderParameter");}
function lime_utils__$DataPointer_DataPointer_$Impl_$() {return require("./../../lime/utils/_DataPointer/DataPointer_Impl_");}

// Constructor

var Shader = function(code) {
	this.__data = new (openfl_display_ShaderData().default)(null);
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying float vAlpha;\n\t\tvarying vec4 vColorMultipliers0;\n\t\tvarying vec4 vColorMultipliers1;\n\t\tvarying vec4 vColorMultipliers2;\n\t\tvarying vec4 vColorMultipliers3;\n\t\tvarying vec4 vColorOffsets;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform bool uColorTransform;\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (uImage0, vTexCoord);\n\t\t\t\n\t\t\tif (color.a == 0.0) {\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\n\t\t\t} else if (uColorTransform) {\n\t\t\t\t\n\t\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\t\t\t\t\n\t\t\t\tmat4 colorMultiplier;\n\t\t\t\tcolorMultiplier[0] = vColorMultipliers0;\n\t\t\t\tcolorMultiplier[1] = vColorMultipliers1;\n\t\t\t\tcolorMultiplier[2] = vColorMultipliers2;\n\t\t\t\tcolorMultiplier[3] = vColorMultipliers3;\n\t\t\t\t\n\t\t\t\tcolor = vColorOffsets + (color * colorMultiplier);\n\t\t\t\t\n\t\t\t\tif (color.a > 0.0) {\n\t\t\t\t\t\n\t\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * vAlpha, color.a * vAlpha);\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\t\n\t\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tgl_FragColor = color * vAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float aAlpha;\n\t\tattribute vec4 aColorMultipliers0;\n\t\tattribute vec4 aColorMultipliers1;\n\t\tattribute vec4 aColorMultipliers2;\n\t\tattribute vec4 aColorMultipliers3;\n\t\tattribute vec4 aColorOffsets;\n\t\tattribute vec4 aPosition;\n\t\tattribute vec2 aTexCoord;\n\t\tvarying float vAlpha;\n\t\tvarying vec4 vColorMultipliers0;\n\t\tvarying vec4 vColorMultipliers1;\n\t\tvarying vec4 vColorMultipliers2;\n\t\tvarying vec4 vColorMultipliers3;\n\t\tvarying vec4 vColorOffsets;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform mat4 uMatrix;\n\t\tuniform bool uColorTransform;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvAlpha = aAlpha;\n\t\t\tvTexCoord = aTexCoord;\n\t\t\t\n\t\t\tif (uColorTransform) {\n\t\t\t\t\n\t\t\t\tvColorMultipliers0 = aColorMultipliers0;\n\t\t\t\tvColorMultipliers1 = aColorMultipliers1;\n\t\t\t\tvColorMultipliers2 = aColorMultipliers2;\n\t\t\t\tvColorMultipliers3 = aColorMultipliers3;\n\t\t\t\tvColorOffsets = aColorOffsets;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tgl_Position = uMatrix * aPosition;\n\t\t\t\n\t\t}";
	}
	this.byteCode = code;
	this.precisionHint = "full";
	this.__glSourceDirty = true;
	this.__numPasses = 1;
}

// Meta

Shader.__name__ = ["openfl","display","Shader"];
Shader.prototype = {
	__disable: function() {
		if(this.glProgram != null) {
			this.__disableGL();
		}
	},
	__disableGL: function() {
		if(this.get_data().uImage0 != null) {
			this.get_data().uImage0.input = null;
		}
		var _g = 0;
		var _g1 = this.__paramBool;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			this.gl.disableVertexAttribArray(parameter.index);
		}
		var _g2 = 0;
		var _g11 = this.__paramFloat;
		while(_g2 < _g11.length) {
			var parameter1 = _g11[_g2];
			++_g2;
			this.gl.disableVertexAttribArray(parameter1.index);
		}
		var _g3 = 0;
		var _g12 = this.__paramInt;
		while(_g3 < _g12.length) {
			var parameter2 = _g12[_g3];
			++_g3;
			this.gl.disableVertexAttribArray(parameter2.index);
		}
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,null);
		this.gl.bindTexture(this.gl.TEXTURE_2D,null);
		if(this.gl.type == (lime_graphics_opengl_GLContextType().default).OPENGL) {
			this.gl.disable(this.gl.TEXTURE_2D);
		}
	},
	__enable: function() {
		this.__init();
		if(this.glProgram != null) {
			this.__enableGL();
		}
	},
	__enableGL: function() {
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			this.gl.uniform1i(input.index,textureCount);
			++textureCount;
		}
		if(this.gl.type == (lime_graphics_opengl_GLContextType().default).OPENGL && textureCount > 0) {
			this.gl.enable(this.gl.TEXTURE_2D);
		}
	},
	__init: function() {
		if(this.__data == null) {
			this.__data = new (openfl_display_ShaderData().default)(null);
		}
		if(this.__glFragmentSource != null && this.__glVertexSource != null && (this.glProgram == null || this.__glSourceDirty)) {
			this.__initGL();
		}
	},
	__initGL: function() {
		if(this.__glSourceDirty || this.__isUniform == null) {
			this.__glSourceDirty = false;
			this.glProgram = null;
			this.__isUniform = new (haxe_ds_StringMap().default)();
			this.__inputBitmapData = [];
			this.__paramBool = [];
			this.__paramFloat = [];
			this.__paramInt = [];
			var this1 = new Float32Array(4);
			this.__uniformMatrix2 = this1;
			var this2 = new Float32Array(9);
			this.__uniformMatrix3 = this2;
			var this3 = new Float32Array(16);
			this.__uniformMatrix4 = this3;
			this.__processGLData(this.get_glVertexSource(),"attribute");
			this.__processGLData(this.get_glVertexSource(),"uniform");
			this.__processGLData(this.get_glFragmentSource(),"uniform");
		}
		if(this.gl != null && this.glProgram == null) {
			var fragment = "#ifdef GL_ES\n\t\t\t\tprecision " + (this.precisionHint == "full" ? "mediump" : "lowp") + " float;\n\t\t\t\t#endif\n\t\t\t\t" + this.get_glFragmentSource();
			this.glProgram = (lime_utils_GLUtils().default).createProgram(this.get_glVertexSource(),fragment);
			if(this.glProgram != null) {
				var _g = 0;
				var _g1 = this.__inputBitmapData;
				while(_g < _g1.length) {
					var input = _g1[_g];
					++_g;
					if(this.__isUniform.get(input.name)) {
						input.index = this.gl.getUniformLocation(this.glProgram,input.name);
					} else {
						input.index = this.gl.getAttribLocation(this.glProgram,input.name);
					}
				}
				var _g2 = 0;
				var _g11 = this.__paramBool;
				while(_g2 < _g11.length) {
					var parameter = _g11[_g2];
					++_g2;
					if(this.__isUniform.get(parameter.name)) {
						parameter.index = this.gl.getUniformLocation(this.glProgram,parameter.name);
					} else {
						parameter.index = this.gl.getAttribLocation(this.glProgram,parameter.name);
					}
				}
				var _g3 = 0;
				var _g12 = this.__paramFloat;
				while(_g3 < _g12.length) {
					var parameter1 = _g12[_g3];
					++_g3;
					if(this.__isUniform.get(parameter1.name)) {
						parameter1.index = this.gl.getUniformLocation(this.glProgram,parameter1.name);
					} else {
						parameter1.index = this.gl.getAttribLocation(this.glProgram,parameter1.name);
					}
				}
				var _g4 = 0;
				var _g13 = this.__paramInt;
				while(_g4 < _g13.length) {
					var parameter2 = _g13[_g4];
					++_g4;
					if(this.__isUniform.get(parameter2.name)) {
						parameter2.index = this.gl.getUniformLocation(this.glProgram,parameter2.name);
					} else {
						parameter2.index = this.gl.getAttribLocation(this.glProgram,parameter2.name);
					}
				}
			}
		}
	},
	__processGLData: function(source,storageType) {
		var lastMatch = 0;
		var position;
		var regex;
		var name;
		var type;
		if(storageType == "uniform") {
			regex = new (EReg().default)("uniform ([A-Za-z0-9]+) ([A-Za-z0-9]+)","");
		} else {
			regex = new (EReg().default)("attribute ([A-Za-z0-9]+) ([A-Za-z0-9]+)","");
		}
		while(regex.matchSub(source,lastMatch)) {
			type = regex.matched(1);
			name = regex.matched(2);
			if((StringTools().default).startsWith(type,"sampler")) {
				var input = new (openfl_display_ShaderInput().default)();
				input.name = name;
				this.__inputBitmapData.push(input);
				(Reflect().default).setField(this.get_data(),name,input);
			} else {
				var parameterType;
				switch(type) {
				case "bool":
					parameterType = "bool";
					break;
				case "bvec2":
					parameterType = "bool2";
					break;
				case "bvec3":
					parameterType = "bool3";
					break;
				case "bvec4":
					parameterType = "bool4";
					break;
				case "dvec2":case "vec2":
					parameterType = "float2";
					break;
				case "dvec3":case "vec3":
					parameterType = "float3";
					break;
				case "double":case "float":
					parameterType = "float";
					break;
				case "ivec3":case "uvec3":
					parameterType = "int3";
					break;
				case "ivec4":case "uvec4":
					parameterType = "int4";
					break;
				case "mat2":case "mat2x2":
					parameterType = "matrix2x2";
					break;
				case "mat2x3":
					parameterType = "matrix2x3";
					break;
				case "mat2x4":
					parameterType = "matrix2x4";
					break;
				case "mat3x2":
					parameterType = "matrix3x2";
					break;
				case "mat3":case "mat3x3":
					parameterType = "matrix3x3";
					break;
				case "mat3x4":
					parameterType = "matrix3x4";
					break;
				case "mat4":case "mat4x4":
					parameterType = "matrix4x4";
					break;
				case "mat4x2":
					parameterType = "matrix4x2";
					break;
				case "mat4x3":
					parameterType = "matrix4x3";
					break;
				case "int":case "uint":
					parameterType = "int";
					break;
				case "ivec2":case "uvec2":
					parameterType = "int2";
					break;
				case "dvec4":case "vec4":
					parameterType = "float4";
					break;
				default:
					parameterType = null;
				}
				switch(parameterType) {
				case "bool":case "bool2":case "bool3":case "bool4":
					var parameter = new (openfl_display_ShaderParameter().default)();
					parameter.name = name;
					parameter.type = parameterType;
					this.__paramBool.push(parameter);
					(Reflect().default).setField(this.get_data(),name,parameter);
					break;
				case "int":case "int2":case "int3":case "int4":
					var parameter1 = new (openfl_display_ShaderParameter().default)();
					parameter1.name = name;
					parameter1.type = parameterType;
					this.__paramInt.push(parameter1);
					(Reflect().default).setField(this.get_data(),name,parameter1);
					break;
				default:
					var parameter2 = new (openfl_display_ShaderParameter().default)();
					parameter2.name = name;
					parameter2.type = parameterType;
					this.__paramFloat.push(parameter2);
					(Reflect().default).setField(this.get_data(),name,parameter2);
				}
			}
			this.__isUniform.set(name,storageType == "uniform");
			position = regex.matchedPos();
			lastMatch = position.pos + position.len;
		}
	},
	__update: function() {
		if(this.glProgram != null) {
			this.__updateGL();
		}
	},
	__updateGL: function() {
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(input.input != null) {
				this.gl.activeTexture(this.gl.TEXTURE0 + textureCount);
				this.gl.bindTexture(this.gl.TEXTURE_2D,input.input.getTexture(this.gl));
				if(input.smoothing) {
					this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR);
					this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR);
				} else {
					this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.NEAREST);
					this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.NEAREST);
				}
			}
			++textureCount;
		}
		var value;
		var index;
		var _g2 = 0;
		var _g11 = this.__paramBool;
		while(_g2 < _g11.length) {
			var parameter = _g11[_g2];
			++_g2;
			value = parameter.value;
			index = parameter.index;
			if(value != null) {
				var _g21 = parameter.type;
				switch(_g21) {
				case "bool":
					this.gl.uniform1i(index,value[0] ? 1 : 0);
					break;
				case "bool2":
					this.gl.uniform2i(index,value[0] ? 1 : 0,value[1] ? 1 : 0);
					break;
				case "bool3":
					this.gl.uniform3i(index,value[0] ? 1 : 0,value[1] ? 1 : 0,value[2] ? 1 : 0);
					break;
				case "bool4":
					this.gl.uniform4i(index,value[0] ? 1 : 0,value[1] ? 1 : 0,value[2] ? 1 : 0,value[3] ? 1 : 0);
					break;
				default:
				}
			} else if(!this.__isUniform.get(parameter.name)) {
				this.gl.enableVertexAttribArray(parameter.index);
			}
		}
		var value1;
		var index1;
		var _g3 = 0;
		var _g12 = this.__paramFloat;
		while(_g3 < _g12.length) {
			var parameter1 = _g12[_g3];
			++_g3;
			value1 = parameter1.value;
			index1 = parameter1.index;
			if(value1 != null) {
				var _g22 = parameter1.type;
				switch(_g22) {
				case "float":
					this.gl.uniform1f(index1,value1[0]);
					break;
				case "float2":
					this.gl.uniform2f(index1,value1[0],value1[1]);
					break;
				case "float3":
					this.gl.uniform3f(index1,value1[0],value1[1],value1[2]);
					break;
				case "float4":
					this.gl.uniform4f(index1,value1[0],value1[1],value1[2],value1[3]);
					break;
				case "matrix2x2":
					var _g23 = 0;
					while(_g23 < 4) {
						var i = _g23++;
						this.__uniformMatrix2[i] = value1[i];
					}
					this.gl.uniformMatrix2fv(index1,1,false,(lime_utils__$DataPointer_DataPointer_$Impl_$().default).fromArrayBufferView(this.__uniformMatrix2));
					break;
				case "matrix3x3":
					var _g24 = 0;
					while(_g24 < 9) {
						var i1 = _g24++;
						this.__uniformMatrix3[i1] = value1[i1];
					}
					this.gl.uniformMatrix3fv(index1,1,false,(lime_utils__$DataPointer_DataPointer_$Impl_$().default).fromArrayBufferView(this.__uniformMatrix3));
					break;
				case "matrix4x4":
					var _g25 = 0;
					while(_g25 < 16) {
						var i2 = _g25++;
						this.__uniformMatrix4[i2] = value1[i2];
					}
					this.gl.uniformMatrix4fv(index1,1,false,(lime_utils__$DataPointer_DataPointer_$Impl_$().default).fromArrayBufferView(this.__uniformMatrix4));
					break;
				default:
				}
			} else if(!this.__isUniform.get(parameter1.name)) {
				this.gl.enableVertexAttribArray(parameter1.index);
				var _g26 = parameter1.type;
				switch(_g26) {
				case "matrix2x2":
					this.gl.enableVertexAttribArray(parameter1.index + 1);
					break;
				case "matrix3x3":
					this.gl.enableVertexAttribArray(parameter1.index + 1);
					this.gl.enableVertexAttribArray(parameter1.index + 2);
					break;
				case "matrix4x4":
					this.gl.enableVertexAttribArray(parameter1.index + 1);
					this.gl.enableVertexAttribArray(parameter1.index + 2);
					this.gl.enableVertexAttribArray(parameter1.index + 3);
					break;
				default:
				}
			}
		}
		var value2;
		var index2;
		var _g4 = 0;
		var _g13 = this.__paramInt;
		while(_g4 < _g13.length) {
			var parameter2 = _g13[_g4];
			++_g4;
			value2 = parameter2.value;
			index2 = parameter2.index;
			if(value2 != null) {
				var _g27 = parameter2.type;
				switch(_g27) {
				case "int":
					this.gl.uniform1i(index2,value2[0]);
					break;
				case "int2":
					this.gl.uniform2i(index2,value2[0],value2[1]);
					break;
				case "int3":
					this.gl.uniform3i(index2,value2[0],value2[1],value2[2]);
					break;
				case "int4":
					this.gl.uniform4i(index2,value2[0],value2[1],value2[2],value2[3]);
					break;
				default:
				}
			} else if(!this.__isUniform.get(parameter2.name)) {
				this.gl.enableVertexAttribArray(parameter2.index);
			}
		}
	},
	get_data: function() {
		if(this.__glSourceDirty || this.__data == null) {
			this.__init();
		}
		return this.__data;
	},
	set_data: function(value) {
		return this.__data = value;
	},
	get_glFragmentSource: function() {
		return this.__glFragmentSource;
	},
	set_glFragmentSource: function(value) {
		if(value != this.__glFragmentSource) {
			this.__glSourceDirty = true;
		}
		return this.__glFragmentSource = value;
	},
	get_glVertexSource: function() {
		return this.__glVertexSource;
	},
	set_glVertexSource: function(value) {
		if(value != this.__glVertexSource) {
			this.__glSourceDirty = true;
		}
		return this.__glVertexSource = value;
	}
};
Shader.prototype.__class__ = $hxClasses["openfl.display.Shader"] = Shader;

// Init

Object.defineProperties(Shader.prototype,{ "data" : { get : function () { return this.get_data (); }, set : function (v) { return this.set_data (v); }}, "glFragmentSource" : { get : function () { return this.get_glFragmentSource (); }, set : function (v) { return this.set_glFragmentSource (v); }}, "glVertexSource" : { get : function () { return this.get_glVertexSource (); }, set : function (v) { return this.set_glVertexSource (v); }}});

// Statics




// Export

exports.default = Shader;